##

spring.data.redis.url=redis://${REDIS_HOST}:${REDIS_PORT}
spring.data.redis.password=${REDIS_PASSWORD}
spring.data.redis.port=${REDIS_PORT}
##
spring.datasource.url=jdbc:postgresql://${DB_HOST}/${DB_SCHEMA}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
##
spring.sql.init.mode=always
##
server.tomcat.remoteip.trusted-proxies=.*
## 
logging.level.org.springframework.security=trace
logging.level.com.joshlong=trace
##
bootiful.authorization.users[0].username=${TWIS_USER:user}
bootiful.authorization.users[0].password=${TWIS_PASSWORD:password}
bootiful.authorization.users[0].roles[]=user
##
spring.security.oauth2.authorizationserver.issuer=http://localhost:8080
management.endpoint.health.probes.enabled=true
management.endpoints.web.exposure.include=health
# use spring cli to encode passwords for use as client secrets
spring.security.oauth2.authorizationserver.client.client-1.registration.client-secret=${TWIS_CLIENT_KEY_SECRET:client}
spring.security.oauth2.authorizationserver.client.client-1.registration.client-id=${TWIS_CLIENT_KEY:key}
spring.security.oauth2.authorizationserver.client.client-1.registration.client-authentication-methods=client_secret_basic
spring.security.oauth2.authorizationserver.client.client-1.registration.authorization-grant-types=client_credentials,authorization_code,refresh_token
spring.security.oauth2.authorizationserver.client.client-1.registration.redirect-uris=http://127.0.0.1:8082/login/oauth2/code/spring
spring.security.oauth2.authorizationserver.client.client-1.registration.scopes=user.read,user.write,openid
spring.security.oauth2.authorizationserver.client.client-1.require-authorization-consent=true

##
#- 'classpath:org/springframework/security/oauth2/server/authorization/client/oauth2-registered-client-schema.sql'
#- 'classpath:org/springframework/security/oauth2/server/authorization/oauth2-authorization-consent-schema.sql'
#- 'classpath:org/springframework/security/oauth2/server/authorization/oauth2-authorization-schema.sql'
